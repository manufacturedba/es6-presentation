section
    h4 Promises
    aside(class="notes").
        Today we'll be looking at Promises; specifically, the Q promise library.  
        Other implementations include the Bluebird promise library which more 
        closely resembles the ES6 implementation of promises and $q service 
        which is Angular's implementation of promises.
section
    section
        div What are they?
        aside(class="notes").
            So before I even explain what a Promise is I need to explain their necessity.  JavaScript both in Node and the browser is single-threaded. Typically rendering, handling of user actions, and style updates are all shared by a one thread.  If there was any such an engine that didn't account for this, we'd be unable to deal with multiple user requests.
            Node handles async via "error-first" callbacks.
    section
        pre
            code.
                var fs = require('fs');

                fs.readFile('someFile.html', 'utf-8', function (err, contents) {
                    if (err) {
                        throw err;
                    }
                    var text = doSomething(contents);
                    fs.writeFile('anotherFile.html', text, function (err) {
                        if (err) {
                            throw err;
                        }
                    });
                });
        aside(class="notes").
            So in this example, we tell Node to read some file and upon completing we check for any error that may have propogated and was passed to our callback. We then perform another operation just the same as before.  All fine and happy for making this an asynchronous operation.
    section
        pre
            code.
                fs.readdir(source, function(err, files) {
                      if (err) {
                        console.log('Error finding files: ' + err)
                      } else {
                        files.forEach(function(filename, fileIndex) {
                          console.log(filename)
                          gm(source + filename).size(function(err, values) {
                                if (err) {
                                  console.log('Error identifying file size: ' + err)
                                } else {
                                      console.log(filename + ' : ' + values)
                                      aspect = (values.width / values.height)
                                      widths.forEach(function(width, widthIndex) {
                                        height = Math.round(width / aspect)
                                        console.log('resizing ' + filename + 'to ' + height + 'x' + height)
                                        this.resize(width, height).write(destination + 'w' + width + '_' + filename, function(err) {
                                          if (err) console.log('Error writing file: ' + err)
                                        })
                                  }.bind(this))
                                }
                          })
                        })
                      }
                })
        aside(class="notes").
            Nesting multiple callbacks can lead into a situation called "callback hell" whereby our code moves 
            further right than forward.  So how do we deal with this situation in a way that's
            readable, containable, and debuggable.

section
    section
        div Promises are another way of deferring computations with an accessible syntax.
        div(class="codeBlock")
            pre(class="fragment")
                code.
                    doSomething().then(function(result){
                        log.info('Done something');
                    });
                    
                    doSomethingElse();
                    log.info('Done something else');
                    
                    Done something else
                    Done something
        aside(class="notes").
            All asynchronous code both in the browser and in Node are handled by an event loop that pushes operations onto the callstack when available.  In this example, we assume doSomething is a promise returning function with a method of then.  
            It may make an external call or perform some operation on 
            a file ex. read, write, etc.  We pass .then a callback to be executed 
            once doSomething has completed.  This means we'll do something and once that's done I want it to run this callback.
    section
        div Promises are a way of shallowing multiple callbacks
            pre(class="fragment")
                code.
                    firstStep()
                    .then(secondStep)
                    .then(thirdStep)
                    .then(function(result) {
                        log.debug('Result from third step is ' + result);
                    });
        aside(class="notes").
            Promise chains, which I'll elaborate on later, allows us to create an 
            asynchronous sequence of operations.  Functions in the chain itself may 
            not necessarily be asynchronous, but by using them with the Q library 
            their execution is delayed for free.
    section
        div Promises are throw safe
        pre(class="fragment fade-in")
            code.
                var result;
                try {
                    result = doSomethingSync();
                } catch(err) {
                    log.error(err); // Continue on
                }
                
                if (result) {
                    try {
                        doSomethingElse();
                    } catch(err) {
                        log.error(err);
                    }
                }  
    section
        div Promises are throw safe
        pre(class="fragment fade-in")
            code.
                doSomething()
                .then(doSomethingElse)
                .fail(function(err) {
                    log.error(err);
                });

        pre(class="fragment fade-in")
                code.
                    doSomething()
                    .fail(function (err) {
                        log.error(err);
                    })
                    .then(doSomethingElse)
                    .fail(function (err) {
                        log.error(err);
                    });
        aside(class="notes").
            Previous to discovering promises I may have been guilty of writing something
            like this.  Here's what it looks like as a promise.
            Promises have two ways to become rejected.  We can either reject them 
            ourselves or they will reject themselves when an error is thrown during their execution.
            We only need to provide a single rejection handler to catch any errors  
            though we can provide each step its own rejection handler.
